let body = document.querySelector('body');
const N = [10,15,11];
const X = 4,L=N.length;
// N=[7,12,10,11];
let w = [], S,Ts=[];
let v,out,gr,iteration;
iteration = 0;
let Er = [];

let colors = ['Black','Gray','Red','Orange','Yellow','Green','Blue','Purple', 'Pink','White','Brown'];   

function myColorsW(){
  w = [[[-0.42981751262351153 ,-4.344962397623276 ,0.06651083882580226 ,2.5525992858261652] ,[0.36425636864447286 ,-1.9459278011625787 ,-1.5803936796335472 ,3.542195084797206] ,[-1.4815951232845546 ,4.455599614385937 ,-6.241874633037215 ,1.7329396652349542] ,[-0.3091062138187117 ,-0.035095248002751406 ,0.38914162912353734 ,5.333454067129287] ,[0.8980114051564384 ,6.071153695997351 ,0.9457975310984825 ,-1.2727957904318308] ,[5.773410785500407 ,-0.16780514391465814 ,1.261409947240225 ,-1.8878627973777748] ,[-1.3233691049252538 ,-0.19060817491881366 ,3.570115254330269 ,1.853498712134404] ,[3.8720822090624956 ,-2.8178789182505355 ,-7.252680819262378 ,0.07939079928265211] ,[0.029670963963593044 ,-5.642904349897825 ,0.5940436436460216 ,-1.0200296565419122] ,[-4.257098378002762 ,-2.895986392894636 ,-1.6427791748578584 ,-0.7469219857705146]] ,[[-0.14928894946846943 ,-2.0662929756976265 ,2.4493958290264 ,-0.6978836272587038 ,0.9698467796646268 ,2.6709927215417455 ,-2.0435815767862544 ,-0.07064207485478137 ,-1.4928169658206651 ,0.21891639599890853] ,[-0.06465272459966132 ,0.03626771587537421 ,0.22662308635300257 ,0.2636889732603844 ,-0.4444823287396917 ,-0.398836459747308 ,-0.49788843866700616 ,-0.23158900643973057 ,-0.002213781481239358 ,0.06570014009037199] ,[-2.7647732270234817 ,-0.055761185814388346 ,-3.728317699647823 ,0.5376416624246122 ,0.9785357348965471 ,3.614371136660352 ,-1.3669936565622394 ,-0.25910668468242143 ,1.6608510931477247 ,-0.12355954802867798] ,[-0.06632683538442577 ,-0.8820274789718598 ,2.1891446567042725 ,-3.895433387363968 ,1.105230667258706 ,-3.3584996741156243 ,3.3712126784817618 ,-0.6583240750417877 ,0.21688147767022697 ,0.21956798324301194] ,[1.8596320354613283 ,-0.399619099596153 ,-0.1012242538146337 ,0.1985904375769344 ,2.694950821707308 ,-0.9995640176731372 ,0.5415044193386991 ,-3.631598900423767 ,3.0584207818050304 ,0.43611059554539594] ,[1.934137728617002 ,0.31267791066931316 ,-0.712387157445454 ,4.206647608904716 ,1.4830349563897456 ,0.32109141321324874 ,-1.7798909403419125 ,-0.3034584866781564 ,-0.7787918243136952 ,-1.2651352845962467] ,[1.12352088441567 ,1.2121983546836292 ,-2.0806173995585024 ,-0.9426159276792778 ,-1.3860725693463067 ,3.9697960364960303 ,-3.9238580850683107 ,-3.166468211996806 ,1.4372681713925952 ,-1.479127104585023] ,[-0.27628995897987924 ,-2.0760686816922833 ,-1.2174560812324078 ,-3.5106741621708166 ,1.8124692832979952 ,-0.864243035834955 ,0.21018774014215577 ,2.301324191595742 ,2.3536478855128884 ,-1.4070759183727894] ,[1.5233260086650364 ,-0.24687927232715565 ,-2.3091111658328494 ,0.5288645598044572 ,0.5685702304683411 ,-2.062482717303527 ,2.1070075285635546 ,-4.121285727412067 ,1.3346376941170202 ,-0.794584513359955] ,[1.397450235481037 ,2.0182311085775564 ,2.5341689973330257 ,1.3141209043753863 ,-0.5395875492410914 ,-0.3193768960845881 ,1.5852133392851897 ,-0.10516055984955189 ,-2.8254525659770904 ,1.2741157239267709] ,[-3.3705345628400107 ,2.3669198653459884 ,-0.4179578402885164 ,0.1357934409634063 ,-0.6000913486936613 ,3.5724740264840804 ,-2.405868587178543 ,-1.252154226707837 ,1.0218826190055674 ,1.211186812628222] ,[2.054209520211437 ,-2.2413061252031925 ,3.1080664812640655 ,-3.853177472932831 ,1.697755238754972 ,0.0028367870376612217 ,-0.4780464656767228 ,3.2584832816541622 ,0.48273356972532555 ,2.6939800987151252] ,[-0.06027148466654634 ,-1.5870146189962866 ,-2.376628722395436 ,1.2472595144887346 ,-0.1977837580226562 ,3.1194798428695636 ,-0.7811844504432948 ,-1.2303445904068537 ,-0.2643218774072338 ,-1.2317445738823172] ,[0.33657574855201267 ,1.5525821666978745 ,-0.41766516335828757 ,0.05556017703678957 ,-6.032403529479345 ,1.973634656401019 ,0.5996064965097965 ,-0.6846071348256723 ,0.6574659420044742 ,3.1450746766441906] ,[2.864007040947707 ,-1.6681752343745746 ,1.3212132166507586 ,4.01665266205404 ,-1.6116341529301326 ,-0.4041380593865599 ,-0.4720979276452757 ,4.005648553106267 ,-2.3746341026189026 ,1.251748894212115]] ,[[0.8363633450675766 ,-0.2903546893876911 ,1.5291398620391756 ,2.947583373843077 ,1.8326050092312995 ,-9.14747283740045 ,2.4162268520412344 ,2.6948013861688285 ,-2.4223225446202186 ,-5.11043345703637 ,2.4054653558536643 ,4.692572490767675 ,0.1487207056309672 ,-1.8534215140521988 ,-1.4188641233394303] ,[2.602224107270527 ,-0.27754453517820993 ,-2.4501171864987925 ,0.6616213409403238 ,-1.0869875086139713 ,1.045171085456848 ,1.1189639408551812 ,1.2797370927395546 ,-0.6134657846726651 ,1.0196095817259423 ,2.225901352798893 ,1.0682050405881123 ,2.641286564665518 ,1.212344872996111 ,3.2437013783549853] ,[-1.821531944563656 ,0.24437698070218558 ,-2.868273087511929 ,0.5927809892806211 ,2.717437390078397 ,0.6217088739039219 ,-2.99426855630917 ,0.9656300034659189 ,0.5460793293767447 ,-0.538830538535127 ,-0.017599402616734778 ,-0.49674738214121844 ,-0.6375744926682617 ,0.46305208523261593 ,-3.351114709083503] ,[-0.5342974064093624 ,0.21924003730834424 ,0.9543234241793808 ,-0.27360315099667876 ,2.244834330926597 ,1.7371392164052555 ,-0.23509936641323304 ,-2.8971340956794562 ,0.3436612658754703 ,0.9377372175012365 ,-0.42568246448012587 ,-1.6168017389358043 ,-2.801336008616655 ,-0.6512819793829214 ,-3.806362561592463] ,[-0.6485451118913789 ,-0.2601077303957315 ,1.9736015603422397 ,-2.8339648116052927 ,-0.30098400931358177 ,2.479170475236226 ,-0.5577967170011041 ,-1.4597022245871727 ,-0.4541490197084609 ,1.7442855997127047 ,-4.118027389701214 ,-0.024465846076104265 ,1.192485124635173 ,-0.48395326252164084 ,-4.7894353499819] ,[1.4831212360160073 ,0.12764972307996894 ,3.151323128206583 ,-0.18166549156783998 ,-1.2763035527445947 ,-0.22097916257696618 ,-2.4978372759337333 ,-2.028497761162976 ,3.2955944971513507 ,2.5215721759560266 ,3.291878393417881 ,-0.46069953521829604 ,-0.4559982629903837 ,-0.8161211151412392 ,-0.17106624924692823] ,[0.7648950497515754 ,0.3490764512280875 ,1.941488833170437 ,-0.5854183869317378 ,-2.055323859348532 ,0.7972361602701372 ,-0.9264752452736438 ,-0.1244942573408736 ,-1.2659835846228014 ,0.9724923817180241 ,0.4716222144108265 ,-1.7570230879745683 ,2.3807682930380287 ,3.7260353811047637 ,1.8038239875912252] ,[-0.28320838733873993 ,-0.4911662144610021 ,-1.3573483641448032 ,-0.13688257821896802 ,-1.6899059771443297 ,-0.8557067517076836 ,3.638727331143054 ,1.6460514764274237 ,0.6882575414358325 ,0.024823954862446793 ,0.6143631288226437 ,-2.587010101059112 ,-0.9921038289032185 ,3.5580134780954573 ,3.0700365215644863] ,[-2.142550890597877 ,-0.14118599168879115 ,-1.3524297923565696 ,3.66429439136834 ,1.3985503234041765 ,0.8859707464114333 ,2.3543114089731043 ,-1.962747692276162 ,0.018196675028776248 ,-1.2696282006064836 ,-2.069983975853407 ,-0.13020402294445857 ,2.25404009995741 ,-0.9943505946370992 ,3.5972671602195323] ,[-0.34770715008469866 ,-0.102448643124538 ,1.1029834622519714 ,-2.498993649193104 ,-2.499293238253915 ,1.8926149356038933 ,0.26666916957897924 ,-0.6223159270846904 ,0.32457975126477057 ,4.074290247092015 ,0.1499533530838847 ,-1.2829264755022196 ,0.07855378713311048 ,0.7157982282440971 ,1.7329125326250747] ,[-0.5535023463418676 ,0.1872421101289654 ,-0.7185418155161964 ,-2.4221079150535862 ,2.962056894760463 ,0.8483958796368477 ,-1.1526426982708184 ,0.6784182454435433 ,-0.07705156479815393 ,-0.8183919607593046 ,-1.031644676814059 ,2.349097084587346 ,-2.0046030120483214 ,-1.9295179085343162 ,0.4168810379034625]]]
}

function trueResArray(trueInd,leng){
  let arr = Array(leng).fill(0);
  for(let i=0;i<leng;i++){
    if(i==trueInd){
      arr[i]++;
    }
  }
  return arr;
}
function rnd(min, max)
{
  return ( min + Math.random() * (max - min) );
}
function init(){
    w = [];
    N.forEach((neurons,layer)=>{
        w.push([]);
        for(let i=0;i<neurons;i++){
            w[layer].push([]);
            for(let j=0;j<(layer>0?N[layer-1]:X);j++){
                w[layer][i].push(rnd(-0.5,0.5));
            }
        }
    });
}
function writeTs(){
  let st='[';
  for(let i=0;i<Ts.length;i++){
    st+='['
    for(let j=0;j<Ts[i].length;j++){
      if(Array.isArray(Ts[i][j])){
        st+='[';
        for(let k=0;k<Ts[i][j].length;k++){
          ///////////////Массив
          if(k<Ts[i][j].length-1){
            st+=`${Ts[i][j][k]},`
          }else{
            st+=`${Ts[i][j][k]}`
          }
        }
        st+=']';
      }else{
        ///////////////Число
        st+=`${Ts[i][j]},`
      }
    }
    if(i<Ts.length-1){
      st+='],\n'
    }else{
      st+=']'
    } 
  }
  st+=']'
  console.log(st);
}
function softmax(x){
  let summ=0;
  let newArr=[];
  for(let i=0;i<x.length;i++){
      summ+=Math.exp(x[i]);
  }
  for(let i=0;i<x.length;i++){
    newArr.push(Math.exp(x[i])/summ);
  }
  return newArr;
}

function randomRange(min,max){
  if(min < max){
      return Math.floor(Math.random()*(max-min+1) + min);
  }else if(min==max){
      return min;
  }else{
    return NaN;
  }
}
function LuActive(x){
  if((x>=0)){
      return x;
    }else{
        return 0.01*x;
    }
  
}

function dxLu(x){
  if((x>=0)){
    return 1
  }else{
    return 0.01
  }
}
function neuron(x){
  out = new Array(N.length);
  for(let i=0;i<out.length;i++){
      out[i] = new Array(N[i]).fill(0);
  }
  N.forEach((neuron,layer)=>{
      for(let i=0;i<neuron;i++){
          S=0;
          for(let j=0;j<w[layer][i].length;j++){
              S+= w[layer][i][j]*(layer>0?out[layer-1][j]:x[j])
          }
          out[layer][i] = LuActive(S);
      }
  });
  if(out[L-1].length>1){
    return softmax(out[L-1]);
  }else{
    return out[L-1][0];
  } 
}
function teach(epoch,lr=0.001){
  let train;
  let Len = N.length-1;
  for(let k=0;k<epoch;k++){
      Ts.forEach((noooone,num)=>{
          train=Ts[randomRange(0,Ts.length-1)];
          ///////////////////
          let y = neuron(train.slice(0,X));
          if(!Array.isArray(y)){
            let e=y-train[X];
            gr = [];
            N.forEach( (v,i) => gr.push([]));
            for(let l=Len;l>=0;--l){
                for(let Neur=0;Neur<N[l];Neur++){
                    if(l==Len){
                        gr[l].push(e*dxLu(y));
                    }else{
                        let sum = 0;
                        gr[l+1].forEach((grr,neuro)=>{
                            sum+= grr * w[l+1][neuro][Neur];
                           
                        })
                        gr[l].push(sum*dxLu(out[l][Neur]));
                        
                    }
                }
            }
          }else{
            let e = [];
            for(let errr=0;errr<y.length;errr++){
              e.push(Math.log(y[errr])*train[X][errr]);
            }
            let C = e.reduce((a,b)=>a+b);
            C=-C;

            gr = [];
            N.forEach( (v,i) => gr.push([]));
            for(let l=Len;l>=0;--l){
              for(let Neur=0;Neur<N[l];Neur++){
                  if(l==Len){
                    gr[l].push(C*(y[Neur]-train[X][Neur])); 
                  }else{
                      let sum = 0;
                      gr[l+1].forEach((grr,neuro)=>{
                          sum+= grr * w[l+1][neuro][Neur];
                         
                      })
                      gr[l].push(sum*dxLu(out[l][Neur]));
                      
                  }
                  
              }
            }
          }
          
          out.forEach(        // Проходимся по всем слоям сети
              (layer, l) =>     //layer - содержит все нейроны в слое, а l - номер слоя
              {
                w[l].forEach(   //Проходимся по всем нейронам в слое
                  (k, j) =>       //k - массив весовых коэффициентов нейрона, а j - номер нейрона
                  {
                    let fp =  dxLu(out[l][j]);  
                    k.forEach(      //Перебираем весовые коэффициенты нейрона
                      (weight,i) =>   //weight - весовой коэффициент, а i номер весового коэффициента
                      { 
                        
                        w[l][j][i] += -lr*gr[l][j]*fp*( l==0 ? train[i] : out[l-1][i] );  //Корректировка весового коэффициента
                      }
                    ); 
                  }
                )
              }
            );
          
      })
  }
  Er.push([iteration,(out[L-1].length==1)?E():softErr()]);                   //Добавление значения ошибки сети в массив по конкретной итерации обучения
  iteration++; 
  callbackNeuronTeach();
}
function softErr(){
  let errs,s,yTr;  
  s=0;
  Ts.forEach((value,index)=>{
    errs = [];
    
    yTr = neuron(value.slice(0,X));
    
    for(let i=0;i<value[X].length;i++){
      errs.push(-value[X][i]*Math.log(yTr[i]));
    } 
    for(let i=0;i<errs.length;i++){
      s+=errs[i];
    }
    
  });
  return s/(Ts.length-1);
  
}
function E()
{
var s=0;
Ts.forEach( (value, index) => 
            {
              s+=(neuron(value.slice(0,X))-value[X])**2;
            }
          );
return 1/Ts.length*s;
}

function writeW(){
  let st='['       
  for(let i=0;i<w.length;i++){
      st+='[';
      for(let j=0;j<w[i].length;j++){
        st+='[';
        for(let k=0;k<w[i][j].length;k++){
          if(k<w[i][j].length-1){
            st+=`${w[i][j][k]} ,`
          }else{
            st+=`${w[i][j][k]}`
          }
        }
        st+=']';
        if(j<w[i].length-1){
          st+=` ,`
        }
      }
      st+=']';
      if(i<w.length-1){
        st+=` ,`
      }
  }
  st+=']'
  console.log(st);
}




///////////////////////////////////////////////////////////////////////////// ////////////////////////////////////////////////////////////////////////////
 


